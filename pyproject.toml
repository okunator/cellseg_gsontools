[tool.poetry]
name = "cellseg-gsontools"
version = "0.1.3"
description = "Toolbelt for merging and extracting features from geojson masks."
authors = ["Okunator <oskari.lehtonen@helsinki.fi>"]
readme = "README.md"
homepage = "https://github.com/okunator/cellseg_gsontools"
repository = "https://github.com/okunator/cellseg_gsontools"
packages = [{ include = "cellseg_gsontools" }]

[tool.poetry.dependencies]
python = "^3.10"
geopandas = "0.14.1"
shapely = ">=2.0"
numpy = "^1.23.4"
scipy = "^1.9.2"
scikit-image = "^0.19.3"
scikit-learn = ">=1.3.0"
tqdm = "^4.64.1"
matplotlib = "^3.6.1"
opencv-python = "^4.2.0.32"
pandarallel = "^1.6.4"
libpysal = "4.9.2"
mapclassify = "^2.5.0"
pathos = "^0.3.1"
numba = "^0.57.1"
spatialpandas = "^0.4.9"
dask-geopandas = "^0.3.1"
dask = "^2023.12.1"
h3 = "^3.7.6"
geojson = { version = "^2.5.0", optional = true }
esda = { version = "^2.4.3", optional = true }
geomstats = { version = "^2.5.0", optional = true }
pyarrow = { version = "^14.0.0", optional = true }

[tool.poetry.extras]
all = ["geojson", "esda", "geomstats", "pyarrow"]

[tool.poetry.dev-dependencies]
pytest = "^6.2.5"
pytest-cov = "^3.0.0"
pytest-xdist = "^2.5.0"
pre-commit = "^2.17.0"
isort = "^5.10.1"
black = "^22.3.0"

[tool.poetry.group.dev.dependencies]
scriv = { extras = ["toml"], version = "^0.16.0" }
ipykernel = "^6.16.0"
ruff = "^0.1.11"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.3"
mkdocstrings = "^0.24.0"

[tool.scriv]
format = "md"
version = "literal: cellseg_gsontools/__init__.py: __version__"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -v"

[tool.isort]
profile = "black"
skip = [".gitignore", ".dockerignore", ".md", ".json"]
multi_line_output = 3

[tool.black]
line-length = 88

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "conftest.py",
    "old",
    "test",
    "tests",
    "__pypackages__",
    "__pycache__",
    "_build",
    "docs",
    "source",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.10
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = ["E4", "E7", "E9", "F"]
ignore = ["E203", "D103", "D104"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.coverage.run]
source = ["cellseg_gsontools"]

[tool.coverage.report]
omit = ["*/tests/*", "*/__init__.py"]
exclude_lines = [
    "raise TypeError",
    "raise ImportError",
    "raise NotImplementedError",
    "raise ZeroDivisionError",
    "raise ValueError",
    "raise IOError",
    "except ImportError",
    "except TypeError",
    "except Exception",
    "def extra_repr",
    "plot()",
]


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
