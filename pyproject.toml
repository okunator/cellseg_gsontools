[tool.poetry]
name = "cellseg-gsontools"
version = "0.1.1"
description = "Toolbelt for merging and extracting features from geojson masks."
authors = ["Okunator <oskari.lehtonen@helsinki.fi>"]
readme = "README.md"
homepage = "https://github.com/okunator/cellseg_gsontools"
repository = "https://github.com/okunator/cellseg_gsontools"
packages = [{ include = "cellseg_gsontools" }]

[tool.poetry.dependencies]
python = "^3.8"
geopandas = ">=0.13"
shapely = ">=2.0"
numpy = "^1.23.4"
scipy = "^1.9.2"
pathos = "^0.2.9"
scikit-image = "^0.19.3"
scikit-learn = ">=1.3.0"
tqdm = "^4.64.1"
matplotlib = "^3.6.1"
opencv-python = "^4.2.0.32"
pandarallel = "^1.6.4"
libpysal = "^4.8.0"
mapclassify = "^2.5.0"
pygeos = "^0.14"
geojson = { version = "^2.5.0", optional = true }
esda = { version = "^2.4.3", optional = true }
geomstats = { version = "^2.5.0", optional = true }
pyarrow = { version = "^11.0.0", optional = true }
numba = "^0.57.1"

[tool.poetry.extras]
all = ["geojson", "esda", "geomstats", "pyarrow"]

[tool.poetry.dev-dependencies]
pytest = "^6.2.5"
pytest-cov = "^3.0.0"
pytest-xdist = "^2.5.0"
flake8 = "^4.0.1"
flake8-docstrings = "^1.6.0"
flake8-bugbear = "^22.1.11"
pyproject-flake8 = "^0.0.1-alpha.2"
pre-commit = "^2.17.0"
isort = "^5.10.1"
black = "^22.3.0"

[tool.poetry.group.dev.dependencies]
scriv = { extras = ["toml"], version = "^0.16.0" }
ipykernel = "^6.16.0"

[tool.scriv]
format = "md"
version = "literal: cellseg_gsontools/__init__.py: __version__"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -v"

[tool.isort]
profile = "black"
skip = [".gitignore", ".dockerignore", ".md", ".json"]
multi_line_output = 3

[tool.black]
line-length = 88

[tool.flake8]
max-line-length = 88
extend-ignore = "E203,D103,D104,"
max-complexity = 10
exclude = ".git,__pycache__,docs/source/conftest.py,old,build,dist,test,tests"

[tool.coverage.run]
source = ["cellseg_gsontools"]

[tool.coverage.report]
omit = ["*/tests/*", "*/__init__.py"]
exclude_lines = [
    "raise TypeError",
    "raise ImportError",
    "raise NotImplementedError",
    "raise ZeroDivisionError",
    "raise ValueError",
    "raise IOError",
    "except ImportError",
    "except TypeError",
    "except Exception",
    "def extra_repr",
    "plot()",
]


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
